{"version":3,"sources":["state/action-types/index.ts","state/reducers/weather.ts","state/reducers/settings.ts","state/reducers/location.ts","state/reducers/index.ts","state/store.ts","utilities/skipCors/skipCors.ts","state/action-creators/index.ts","components/searchPlacesButton/searchPlacesButton.tsx","hooks/use-actions.ts","components/currentLocationButton/currentLocationButton.tsx","utilities/Image/Image.tsx","components/currentSituation/currentSituation.tsx","components/dateAndLocation/dateAndLocation.tsx","components/searchPlacesForm/searchPlacesForm.tsx","hooks/use-typed-selector.ts","utilities/formatDate.ts","utilities/printDegree.ts","components/current/current.tsx","components/unitSelect/unitSelect.tsx","components/forecasts/dayCard/dayCard.tsx","components/forecasts/forecasts.tsx","hoc/highlightCard/highlightCard.tsx","utilities/compass/compass.tsx","components/highlights/windCard/windCard.tsx","utilities/percentBar/percentBar.tsx","components/highlights/humidityCard/humidityCard.tsx","components/highlights/visibilityCard/visibilityCard.tsx","components/highlights/pressureCard/pressureCard.tsx","components/highlights/highlights.tsx","components/forecasts-highlights/forecasts-highlights.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ActionType","initialState","temperature","situation","nextFiveDays","windSpeed","windDirection","windDirectionCompass","humidity","visibility","airPressure","loading","weatherDate","abbr","fetchWeatherStart","state","fetchWeatherFail","action","fetchWeatherComplete","newState","currentValues","payload","the_temp","weather_state_name","slice","wind_speed","wind_direction","wind_direction_compass","air_pressure","weather_state_abbr","reducer","type","FETCH_WEATHER_START","FETCH_WEATHER_COMPLETE","FETCH_WEATHER_FAIL","weatherUnit","distanceUnit","speedUnit","toggleTemperatureUnit","TOGGLE_TEMPERATURE_UNIT","latt_long","location_type","title","woeid","getCityWoeidStart","getCityWoeidFail","getCityWoeidComplete","setCity","GET_CITY_WOEID_START","GET_CITY_WOEID_COMPLETE","GET_CITY_WOEID_FAIL","SET_CITY","reducers","combineReducers","weather","weatherReducer","settings","settingsReducer","location","locationReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","skipCors","apiBaseUrl","skipCorsURL","apiQuery","a","axios","get","then","response","data","catch","error","console","log","apiURL","fetchWeather","dispatch","url","consolidated_weather","message","getCityWoeid","city","searchPlacesButton","onClickHandler","className","onClick","useActions","useDispatch","useMemo","bindActionCreators","actionCreators","SearchPlacesButton","status","localStorage","setItem","ImageHelper","src","placeholderImg","props","useState","imgSrc","setSrc","onLoad","useCallback","useEffect","img","Image","addEventListener","removeEventListener","alt","currentSituation","image","situationName","weatherIcon","height","val","unit","DateAndLocation","weatherDay","SearchPlacesForm","formVisible","hideForm","results","setResults","searching","found","setFound","srcInput","useRef","searchResults","map","result","index","cityData","onCitySelect","ref","placeholder","value","searchTerm","current","length","useTypedSelector","useSelector","formatDate","dateOBJ","myDate","Date","getDay","getDate","getMonth","printDegree","Math","floor","Current","currentParams","weatherLocation","temperatureUnit","searchPlacevisible","setSearchPlacevisible","imagePath","toString","today","now","formattedDate","UnitSelect","temperatureSelectButtons","buttonText","DayCard","day","temperatureMax","temperatureMin","maxTemperature","minTemperature","ForeCasts","fiveDayforecasts","forecasts","forecast","highlightCard","children","cardName","cardTitle","cardClass","compass","angle","style","transform","windCard","windSpeedString","toFixed","percentBar","colors","width","humidityCard","humidityPercent","visibilityCard","visibilityDistance","visibilityDistanceString","pressureCard","pressureAmountNumber","pressureUnit","highlights","forecatsHighlights","forecastsParams","nextFiveDaysValues","applicable_date","max_temp","min_temp","highlightsValues","App","setLocation","locationWoeid","weatherParams","loadingParam","getLocation","myLocation","getItem","paramsLoading","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2de1955a.chunk.js","sourcesContent":["export enum ActionType {\r\n  DUMMY_ACTION_0 = 'DUMMY_ACTION_0',\r\n  DUMMY_ACTION_1 = 'DUMMY_ACTION_1',\r\n  FETCH_WEATHER_START = 'FETCH_WEATHER_START',\r\n  FETCH_WEATHER_COMPLETE = 'FETCH_WEATHER_COMPLETE',\r\n  FETCH_WEATHER_FAIL = 'FETCH_WEATHER_FAIL',\r\n  CHANGE_SETTINGS_START = 'CHANGE_SETTINGS_START',\r\n  CHANGE_SETTINGS_COMPLETE = 'CHANGE_SETTINGS_COMPLETE',\r\n  CHANGE_SETTINGS_FAIL = 'CHANGE_SETTINGS_FAIL',\r\n  GET_CITY_WOEID_START = 'GET_CITY_WOEID_START',\r\n  GET_CITY_WOEID_COMPLETE = 'GET_CITY_WOEID_COMPLETE',\r\n  GET_CITY_WOEID_FAIL = 'GET_CITY_WOEID_FAIL',\r\n  SET_CITY = 'SET_CITY',\r\n  TOGGLE_TEMPERATURE_UNIT = 'TOGGLE_TEMPERATURE_UNIT',\r\n}\r\n","import { WeatherState } from './../../types/index';\r\nimport { ActionType } from './../action-types';\r\nimport { Action, FetchWeatherCompleteAction } from './../actions';\r\n\r\nconst initialState: WeatherState = {\r\n  temperature: 0,\r\n  situation: '',\r\n  nextFiveDays: [],\r\n  windSpeed: 0,\r\n  windDirection: 0,\r\n  windDirectionCompass: '',\r\n  humidity: 0,\r\n  visibility: 0,\r\n  airPressure: 0,\r\n  loading: true,\r\n  weatherDate: '',\r\n  abbr: '',\r\n};\r\n\r\nconst fetchWeatherStart = (state: WeatherState) => {\r\n  return { ...state, loading: true };\r\n};\r\n\r\nconst fetchWeatherFail = (action: Action, state: WeatherState) => {\r\n  \r\n  return { ...state, loading: false };\r\n};\r\n\r\nconst fetchWeatherComplete = (\r\n  action: FetchWeatherCompleteAction,\r\n  state: WeatherState\r\n) => {\r\n  const newState = { ...state };\r\n  //newState.airPressure = action.payload[0]\r\n  //const weatherDataList:<Array>str = action.payload\r\n  const currentValues = action.payload[0];\r\n  newState.temperature = currentValues.the_temp;\r\n  newState.situation = currentValues.weather_state_name;\r\n  newState.nextFiveDays = action.payload.slice(1);\r\n  newState.windSpeed = currentValues.wind_speed;\r\n  newState.windDirection = currentValues.wind_direction;\r\n  newState.windDirectionCompass = currentValues.wind_direction_compass;\r\n  newState.humidity = currentValues.humidity;\r\n  newState.visibility = currentValues.visibility;\r\n  newState.airPressure = currentValues.air_pressure;\r\n  newState.abbr = currentValues.weather_state_abbr;\r\n  \r\n\r\n  newState.loading = false;\r\n\r\n  //console.log(action.payload, 'FIFI');\r\n  return { ...newState };\r\n};\r\n\r\nconst reducer = (\r\n  state: WeatherState = initialState,\r\n  action: Action\r\n): WeatherState => {\r\n  switch (action.type) {\r\n    case ActionType.FETCH_WEATHER_START:\r\n      return fetchWeatherStart(state);\r\n\r\n    case ActionType.FETCH_WEATHER_COMPLETE:\r\n      return fetchWeatherComplete(action, state);\r\n\r\n    case ActionType.FETCH_WEATHER_FAIL:\r\n      return fetchWeatherFail(action, state);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { Settings } from './../../types/index';\r\nimport { ActionType } from './../action-types';\r\nimport { Action } from './../actions';\r\n\r\n\r\n\r\nconst initialState: Settings = {  \r\n  weatherUnit: 'C',\r\n  distanceUnit: 'miles',\r\n  speedUnit: 'mph',\r\n\r\n};\r\n\r\nconst toggleTemperatureUnit = (state: Settings) => {\r\n  const newState = { ...state }\r\n  newState.weatherUnit = newState.weatherUnit === 'C' ? 'F' : 'C';\r\n  return newState\r\n}\r\n\r\nconst reducer = (state: Settings = initialState, action: Action) => {\r\n  switch (action.type) {\r\n    case ActionType.TOGGLE_TEMPERATURE_UNIT:\r\n      return toggleTemperatureUnit(state);\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { location } from './../../types/index';\r\nimport { ActionType } from './../action-types';\r\nimport { Action, getCityWoeidCompleteAction, setCityAction } from './../actions';\r\n\r\nconst initialState: location = {\r\n  latt_long: '',\r\n  location_type: '',\r\n  title: '',\r\n  woeid: 0,\r\n  loading: false,\r\n};\r\n\r\nconst getCityWoeidStart = (state: location) => {\r\n  return { ...state, loading: true };\r\n};\r\n\r\nconst getCityWoeidFail = (action: Action, state: location) => {\r\n  \r\n  return { ...state, loading: false };\r\n};\r\n\r\nconst getCityWoeidComplete = (\r\n  action: getCityWoeidCompleteAction,\r\n  state: location\r\n) => {\r\n  const newState = { ...state };\r\n  const currentValues = action.payload;\r\n  newState.latt_long = currentValues.latt_long;\r\n  newState.loading = false;\r\n  newState.location_type = currentValues.location_type;\r\n  newState.title = currentValues.title;\r\n  newState.woeid = currentValues.woeid\r\n  return { ...newState };\r\n};\r\n\r\nconst setCity = (\r\n  action: setCityAction,\r\n  state: location\r\n) => {\r\n  const newState = { ...state };\r\n  const currentValues = action.payload;\r\n  newState.latt_long = currentValues.latt_long;\r\n  newState.loading = false;\r\n  newState.location_type = currentValues.location_type;\r\n  newState.title = currentValues.title;\r\n  newState.woeid = currentValues.woeid\r\n  return { ...newState };\r\n};\r\n\r\nconst reducer = (state: location = initialState, action: Action) => {\r\n  switch (action.type) {\r\n    case ActionType.GET_CITY_WOEID_START:\r\n      return getCityWoeidStart(state);\r\n\r\n    case ActionType.GET_CITY_WOEID_COMPLETE:\r\n      return getCityWoeidComplete(action, state);\r\n\r\n    case ActionType.GET_CITY_WOEID_FAIL:\r\n      return getCityWoeidFail(action, state);\r\n    \r\n    case ActionType.SET_CITY:\r\n        return setCity(action, state);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\nimport weatherReducer from './weather';\r\nimport settingsReducer from './settings';\r\nimport locationReducer from './location';\r\n\r\n\r\nconst reducers = combineReducers({\r\n  weather: weatherReducer,\r\n  settings: settingsReducer,\r\n  location: locationReducer,\r\n});\r\n\r\nexport default reducers;\r\n\r\nexport type RootState = ReturnType<typeof reducers>;\r\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './reducers';\r\n\r\nimport { ActionType } from './action-types';\r\n\r\n// Added for redux developer tools\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n// Added for redux developer tools\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// Modified for redux developer tools\r\n//export const store = createStore(reducers, {}, applyMiddleware(thunk));\r\nexport const store = createStore(\r\n  reducers,\r\n  {},\r\n  composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\n//toggleTemperatureUnit\r\n\r\n\r\n\r\n//MANUAL TEST\r\n// store.dispatch({\r\n//   type: ActionType.SET_CITY,\r\n//   payload: {\r\n//     \"title\": \"Paris\",\r\n//     \"location_type\": \"City\",\r\n//     \"woeid\": 615702,\r\n//     \"latt_long\": \"48.856930,2.341200\",\r\n//     \"loading\":false\r\n//   }\r\n// })\r\n\r\n// store.dispatch({\r\n//   type: ActionType.FETCH_WEATHER_COMPLETE,\r\n//   payload: \"Error\"\r\n// })\r\n\r\n// store.dispatch({\r\n//   type: ActionType.INSERT_CELL_AFTER,\r\n//   payload: { id: null, type: 'text'}\r\n// })\r\n\r\n// store.dispatch({\r\n//   type: ActionType.INSERT_CELL_AFTER,\r\n//   payload: { id: null, type: 'code'}\r\n// })\r\n\r\n// store.dispatch({\r\n//   type: ActionType.INSERT_CELL_AFTER,\r\n//   payload: { id: null, type: 'text'}\r\n// })\r\n\r\n// const state = store.getState();\r\n// console.log(state)\r\n","import axios from 'axios';\r\n\r\n// const skipCorsURL = 'http://localhost:4152/';\r\n// const apiBaseUrl = 'https://www.metaweather.com/api/location/search/?';\r\n// const apiQuery = 'query=SAN';\r\n// console.log(`${skipCorsURL}${apiBaseUrl}${apiQuery}`)\r\n\r\nexport const skipCors = async (\r\n  apiBaseUrl: string,\r\n  skipCorsURL: string,\r\n  apiQuery: string\r\n) => {\r\n  return axios\r\n    .get(`${skipCorsURL}${apiBaseUrl}${apiQuery}`)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error) => {\r\n      console.log('AXIOS ERROR', error);\r\n      return error\r\n    });\r\n};\r\n","import { location } from './../../types/index';\r\nimport { Dispatch } from 'redux';\r\nimport { Weather } from '../../types/index';\r\nimport { ActionType } from '../action-types';\r\nimport {\r\n  FetchWeatherStartAction,\r\n  FetchWeatherCompleteAction,\r\n  FetchWeatherFailAction,\r\n  getCityWoeidStartAction,\r\n  getCityWoeidCompleteAction,\r\n  getCityWoeidFailAction,\r\n  setCityAction,\r\n  toggleTemperatureUnitAction,\r\n  Action,\r\n} from '../actions';\r\nimport { skipCors } from '../../utilities/skipCors/skipCors';\r\n\r\nconst apiURL = 'https://www.metaweather.com/api/location/';\r\n\r\nexport const fetchWeatherStart = (): FetchWeatherStartAction => {\r\n  return {\r\n    type: ActionType.FETCH_WEATHER_START,\r\n  };\r\n};\r\n\r\nexport const fetchWeatherFail = (error: string): FetchWeatherFailAction => {\r\n  return {\r\n    type: ActionType.FETCH_WEATHER_FAIL,\r\n    payload: error,\r\n  };\r\n};\r\n\r\nexport const fetchWeatherComplete = (\r\n  data: Weather[]\r\n): FetchWeatherCompleteAction => {\r\n  return {\r\n    type: ActionType.FETCH_WEATHER_COMPLETE,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const fetchWeather = (woeid: number = 44418) => {\r\n  return async (dispatch: Dispatch<Action>) => {\r\n    dispatch({ type: ActionType.FETCH_WEATHER_START });\r\n    // const woeid = '44418'; //Where On Earth ID\r\n    const url = `${apiURL}${woeid}/`;\r\n    //console.log('FETCH WEATHER CALLED', url);\r\n    try {\r\n      const response = await skipCors(url, 'http://weather-cors.trmov.com/', '');\r\n      dispatch<FetchWeatherCompleteAction>({\r\n        type: ActionType.FETCH_WEATHER_COMPLETE,\r\n        payload: response.consolidated_weather,\r\n      });\r\n    } catch (error) {\r\n      dispatch<FetchWeatherFailAction>({\r\n        type: ActionType.FETCH_WEATHER_FAIL,\r\n        payload: error.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const setCity = (data: location): setCityAction => {\r\n  return {\r\n    type: ActionType.SET_CITY,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getCityWoeidStart = (): getCityWoeidStartAction => {\r\n  return {\r\n    type: ActionType.GET_CITY_WOEID_START,\r\n  };\r\n};\r\n\r\nexport const getCityWoeidFail = (error: string): getCityWoeidFailAction => {\r\n  return {\r\n    type: ActionType.GET_CITY_WOEID_FAIL,\r\n    payload: error,\r\n  };\r\n};\r\n\r\nexport const getCityWoeidComplete = (\r\n  data: location\r\n): getCityWoeidCompleteAction => {\r\n  return {\r\n    type: ActionType.GET_CITY_WOEID_COMPLETE,\r\n    payload: data,\r\n  };\r\n};\r\n\r\nexport const getCityWoeid = (city: string) => {\r\n  return async (dispatch: Dispatch<Action>) => {\r\n    dispatch({ type: ActionType.GET_CITY_WOEID_START });\r\n    const url = `${apiURL}search/?query=${city}`;\r\n    //console.log('GET WOID', url);\r\n\r\n    try {\r\n      const response = await skipCors(url, 'http://weather-cors.trmov.com/', '');\r\n      //console.log('WOID RESULT', response);\r\n      dispatch<getCityWoeidCompleteAction>({\r\n        type: ActionType.GET_CITY_WOEID_COMPLETE,\r\n        payload: response[0],\r\n      });\r\n    } catch (error) {\r\n      dispatch<getCityWoeidFailAction>({\r\n        type: ActionType.GET_CITY_WOEID_FAIL,\r\n        payload: error.message,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const toggleTemperatureUnit = (): toggleTemperatureUnitAction => {\r\n  return {\r\n    type: ActionType.TOGGLE_TEMPERATURE_UNIT,\r\n  };\r\n};\r\n\r\n// export const updateCell = (id: string, content: string): UpdateCellAction => {\r\n//   return {\r\n//     type: ActionType.UPDATE_CELL,\r\n//     payload: {\r\n//       id,\r\n//       content,\r\n//     },\r\n//   };\r\n// };\r\n\r\n// export const deleteCell = (id: string): DeleteCellAction => {\r\n//   return {\r\n//     type: ActionType.DELETE_CELL,\r\n//     payload: id,\r\n//   };\r\n// };\r\n\r\n// export const moveCell = (id: string, direction: Direction): MoveCellAction => {\r\n//   return {\r\n//     type: ActionType.MOVE_CELL,\r\n//     payload: {\r\n//       id,\r\n//       direction,\r\n//     },\r\n//   };\r\n// };\r\n\r\n// export const insertCellAfter = (\r\n//   id: string | null,\r\n//   cellType: CellTypes\r\n// ): insertCellAfterAction => {\r\n//   return {\r\n//     type: ActionType.INSERT_CELL_AFTER,\r\n//     payload: {\r\n//       id,\r\n//       type: cellType,\r\n//     },\r\n//   };\r\n// };\r\n\r\n// export const createBundle = (cellId: string, input: string) => {\r\n//   return async (dispatch: Dispatch<Action>) => {\r\n//     dispatch({\r\n//       type: ActionType.BUNDLE_START,\r\n//       payload: {\r\n//         cellId,\r\n//       },\r\n//     });\r\n\r\n//     const result = await bundle(input);\r\n\r\n//     dispatch({\r\n//       type: ActionType.BUNDLE_COMPLETE,\r\n//       payload: {\r\n//         cellId,\r\n//         bundle: {\r\n//           code: result.code,\r\n//           err: result.err,\r\n//         },\r\n//       },\r\n//     });\r\n//   };\r\n// };\r\n\r\n// export const fetchCells = () => {\r\n//   return async (dispatch: Dispatch<Action>) => {\r\n//     dispatch({ type: ActionType.FETCH_CELLS });\r\n\r\n//     try {\r\n//       // Data is coming from LOCAL-API it should be an ARRAY\r\n//       const { data }: { data: Cell[] } = await axios.get('/cells');\r\n//       dispatch({\r\n//         type: ActionType.FETCH_CELLS_COMPLETE,\r\n//         payload: data,\r\n//       });\r\n//     } catch (err) {\r\n//       dispatch({\r\n//         type: ActionType.FETCH_CELLS_ERROR,\r\n//         payload: err.message,\r\n//       });\r\n//     }\r\n//   };\r\n// };\r\n\r\n// export const saveCells = () => {\r\n//   return async (dispatch: Dispatch<Action>, getState: () => RootState) => {\r\n//     const {\r\n//       cells: { data, order },\r\n//     } = getState();\r\n\r\n//     const cells = order.map((id) => data[id]);\r\n//     console.log({ cells })\r\n//     try {\r\n\r\n//       await axios.post('/cells', { cells });\r\n//     } catch (err) {\r\n//       dispatch({\r\n//         type: ActionType.SAVE_CELLS_ERROR,\r\n//         payload: err.message,\r\n//       });\r\n//     }\r\n//   };\r\n// };\r\n","import './searchPlacesButton.css';\r\n\r\ninterface searchPlaces {\r\n  onClickHandler: () => void;\r\n}\r\n\r\n\r\nconst searchPlacesButton:React.FC<searchPlaces> = ({onClickHandler}):JSX.Element => {\r\n  return (\r\n    <button className='searchPlacesButton' onClick={() => onClickHandler()}>\r\n      <span>Seach for places</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default searchPlacesButton;\r\n","import { useMemo } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { actionCreators } from \"../state\";\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  return useMemo(() => {\r\n    return bindActionCreators(actionCreators, dispatch);\r\n  }, [dispatch]);\r\n};\r\n","import './currentLocationButton.css';\r\nimport { useActions } from '../../hooks/use-actions';\r\nimport { skipCors } from '../../utilities/skipCors/skipCors';\r\n\r\n\r\n\r\nconst SearchPlacesButton: React.FC = (): JSX.Element => {\r\n  const { getCityWoeid } = useActions();\r\n\r\n  const getCurrentLocation = () => {\r\n    console.log(\"LOCATION CALL\")\r\n    skipCors('http://ip-api.com/json/', 'http://weather-cors.trmov.com/', '').then(\r\n      (data) => {\r\n        console.log(\"DATA >>\",data)\r\n        if (data.status === 'success') {\r\n          if (data.city === 'Frankfurt am Main') {\r\n            localStorage.setItem('location', 'Frankfurt');\r\n            getCityWoeid('Frankfurt')\r\n          } else {\r\n            localStorage.setItem('location', data.city);\r\n            getCityWoeid(data.city)\r\n          }\r\n          \r\n          \r\n\r\n\r\n          \r\n        } else {\r\n          console.log('ERROR', 'Location could not be fetched');\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <button className='currentLocationButton' onClick={() => getCurrentLocation()}>\r\n      <span></span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default SearchPlacesButton;","import { useCallback, useState, useEffect } from 'react';\r\n\r\ninterface ImageProps extends React.ImgHTMLAttributes<HTMLImageElement> {\r\n  placeholderImg?: string;\r\n}\r\n\r\nconst ImageHelper = ({ src, placeholderImg, ...props }: ImageProps) => {\r\n  const [imgSrc, setSrc] = useState(placeholderImg || src);\r\n  const onLoad = useCallback(() => {\r\n    setSrc(src);\r\n  }, [src]);\r\n  useEffect(() => {\r\n    const img = new Image();\r\n    img.src = src as string;\r\n    img.addEventListener('load', onLoad);\r\n    return () => {\r\n      img.removeEventListener('load', onLoad);\r\n    };\r\n  }, [src, onLoad]);\r\n  return <img {...props} alt={imgSrc} src={imgSrc} />;\r\n};\r\n\r\nexport default ImageHelper\r\n","import Image from '../../utilities/Image/Image';\r\nimport './currentSituation.css';\r\n\r\ninterface situation {\r\n  image: string;\r\n  temperature: { val: number, unit: string };\r\n  situationName: string;\r\n}\r\n\r\nconst currentSituation: React.FC<situation> = ({\r\n  image,\r\n  temperature,\r\n  situationName,\r\n}): JSX.Element => {\r\n  const weatherIcon = `/assets/${image}`;\r\n  return (\r\n    <>\r\n      <div className='currentSitutation'>\r\n        <div className='currentWeatherImage'>\r\n          <Image src={weatherIcon} height='160' />\r\n        </div>\r\n        <div className=\"currentCondition\">\r\n          <div className='currentTemperature'>\r\n            <span className='temperatureValue'>{temperature.val}</span>\r\n            <span className='temperatureUnit'>{temperature.unit}</span>\r\n          </div>\r\n          <div className='currentSituationName'>\r\n            <span>{situationName}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default currentSituation;\r\n","import './dateAndLocation.css';\r\n\r\ninterface dateAndLocation {\r\n  weatherDay: string;\r\n  weatherDate: string;\r\n  location: string;\r\n}\r\n\r\nconst DateAndLocation: React.FC<dateAndLocation> = ({\r\n  weatherDay,\r\n  weatherDate,\r\n  location,\r\n}): JSX.Element => {\r\n  return (\r\n    <>\r\n      <div className='DateAndLocation'>\r\n        <div className='dateContainer'>\r\n          <span className='daySpan'>{weatherDay}</span>\r\n          <span className='dotSpan'>•</span>\r\n          <span className='dateSpan'>{weatherDate}</span>\r\n        </div>\r\n        <div className='locationContainer'>\r\n          <span>{location}</span>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DateAndLocation;\r\n","import { useState, useRef } from 'react';\r\nimport { useActions } from '../../hooks/use-actions';\r\nimport { skipCors } from '../../utilities/skipCors/skipCors';\r\nimport { location } from '../../types/index';\r\nimport './searchPlacesForm.css';\r\n\r\ninterface searchForm {\r\n  formVisible: boolean;\r\n  hideForm: () => void;\r\n}\r\n\r\ninterface iSearch {\r\n  found: null | boolean;\r\n  searching: boolean;\r\n}\r\n\r\nconst SearchPlacesForm: React.FC<searchForm> = ({\r\n  formVisible,\r\n  hideForm,\r\n}): JSX.Element => {\r\n  const [results, setResults] = useState([]);\r\n  const [found, setFound] = useState<iSearch>({\r\n    searching: false,\r\n    found: null,\r\n  });\r\n  const { setCity } = useActions();\r\n\r\n  // useEffect(() => {\r\n  //   setFound({ searching: false, found: null });\r\n  // }, []);\r\n\r\n  const srcInput = useRef<HTMLInputElement | null>(null);\r\n\r\n  const onSubmitHandler = () => {\r\n    setResults([]);\r\n    setFound({ searching: true, found: null });\r\n    const searchTerm = `query=${srcInput.current?.value}`;\r\n    skipCors(\r\n      'https://www.metaweather.com/api/location/search/?',\r\n      'http://weather-cors.trmov.com/',\r\n      searchTerm\r\n    ).then((data) => {\r\n      if (data.length > 0) {\r\n        setResults(data);\r\n        setFound({ searching: false, found: true });\r\n      } else {\r\n        setResults([]);\r\n        setFound({ searching: false, found: false });\r\n      }\r\n    });\r\n  };\r\n\r\n  const onCitySelect = (index: number): void => {\r\n    const cityData = results[index];\r\n    setCity(cityData);\r\n    hideForm();\r\n  };\r\n\r\n  const searchResults = results.map((result: location, index: number) => {\r\n    return (\r\n      <button key={result.woeid} onClick={() => onCitySelect(index)}>\r\n        <span>{result.title}</span>\r\n      </button>\r\n    );\r\n  });\r\n\r\n  const searchResultsElements = () => {\r\n    if (found.searching)\r\n      return <div className='Search-in-progress'> Search in progress</div>;\r\n    if (!found.searching && found.found) return searchResults;\r\n    if (!found.searching && found.found === false)\r\n      return <div className='not-found'>Not found</div>;\r\n  };\r\n\r\n  return formVisible ? (\r\n    <div className='searchPlacesForm'>\r\n      <div className='search-location'>\r\n        <input\r\n          ref={srcInput}\r\n          type='text'\r\n          className='search-location-input'\r\n          placeholder='Search location'\r\n        />\r\n        <input\r\n          type='button'\r\n          value='Search'\r\n          className='search-location-bt'\r\n          onClick={onSubmitHandler}\r\n        />\r\n      </div>\r\n      <div className='cities-near'>{searchResultsElements()}</div>\r\n      <button className='close-form' onClick={hideForm}>\r\n        <span></span>\r\n      </button>\r\n    </div>\r\n  ) : (\r\n    <div></div>\r\n  );\r\n};\r\n\r\nexport default SearchPlacesForm;\r\n","import { useSelector, TypedUseSelectorHook } from \"react-redux\";\r\nimport { RootState } from \"./../state/reducers/index\";\r\n\r\n\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;","export const formatDate = (dateOBJ: Date): string => {\r\n  const myDate = new Date(dateOBJ);\r\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thur', 'Fri', 'Sat'];\r\n  const months = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec',\r\n  ];\r\n  const formattedDate = `${days[myDate.getDay()]}, ${myDate.getDate()} ${\r\n    months[myDate.getMonth()]\r\n  }`;\r\n  return formattedDate;\r\n};\r\n","export const printDegree = (value: number, unit: string): any => {\r\n  const temperature =\r\n    unit === 'C' ? Math.floor(value) : Math.floor(value * (9 / 5) + 32);\r\n  const unitString = `°${unit}`;\r\n  return { val:temperature, unit:unitString };\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport SearchPlacesButton from '../searchPlacesButton/searchPlacesButton';\r\nimport CurrentLocationButton from '../currentLocationButton/currentLocationButton';\r\nimport CurrentSituation from '../currentSituation/currentSituation';\r\nimport DateAndLocation from '../dateAndLocation/dateAndLocation';\r\nimport SearchPlacesForm from '../searchPlacesForm/searchPlacesForm';\r\nimport { useTypedSelector } from '../../hooks/use-typed-selector';\r\nimport { formatDate } from '../../utilities/formatDate';\r\nimport { printDegree } from '../../utilities/printDegree';\r\nimport './current.css';\r\n\r\ninterface Values {\r\n  currentParams: {\r\n    temperature: number;\r\n    situation: string;\r\n    abbr: string;\r\n  };\r\n}\r\n// getCurrentLocation: () => {};\r\nconst Current: React.FC<Values> = ({ currentParams }: Values) => {\r\n  const weatherLocation = useTypedSelector((state) => state.location.title);\r\n  const temperatureUnit = useTypedSelector((state) => state.settings.weatherUnit);\r\n\r\n  console.log(temperatureUnit)\r\n  const [searchPlacevisible, setSearchPlacevisible] = useState(false);\r\n  useEffect(() => {}, [searchPlacevisible]);\r\n\r\n  const showSearch = () => {\r\n    setSearchPlacevisible(true);\r\n  };\r\n\r\n  const hideSearch = () => {\r\n    setSearchPlacevisible(false);\r\n  };\r\n\r\n  const imagePath = `${currentParams.abbr.toString()}.png`;\r\n\r\n  const today = new Date(Date.now());\r\n  const formattedDate = formatDate(today);\r\n\r\n  return (\r\n    <>\r\n      <div className='current__top'>\r\n        <SearchPlacesButton onClickHandler={showSearch} />\r\n        <CurrentLocationButton />\r\n      </div>\r\n      <div className='current__mid'>\r\n        <CurrentSituation\r\n          image={imagePath}\r\n          situationName={currentParams.situation}\r\n          temperature={printDegree(currentParams.temperature,temperatureUnit)}\r\n        />\r\n      </div>\r\n      <div className='current__bottom'>\r\n        <DateAndLocation\r\n          weatherDay='Today'\r\n          weatherDate={formattedDate}\r\n          location={weatherLocation}\r\n        />\r\n      </div>\r\n      {searchPlacevisible && (\r\n        <SearchPlacesForm\r\n          formVisible={searchPlacevisible}\r\n          hideForm={hideSearch}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Current;\r\n","import { useTypedSelector } from '../../hooks/use-typed-selector';\r\nimport { useActions } from '../../hooks/use-actions';\r\nimport './unitSelect.css';\r\n\r\nconst UnitSelect: React.FC = (): JSX.Element => {\r\n  const temperatureUnit = useTypedSelector(\r\n    (state) => state.settings.weatherUnit\r\n  );\r\n  const { toggleTemperatureUnit } = useActions();\r\n\r\n  const temperatureSelectButtons = ['F', 'C'].map((buttonText, index) => {\r\n    const button =\r\n      buttonText === temperatureUnit ? (\r\n        <button key={`unitButton${index}`} className={'active-unit'}>\r\n          °{buttonText}\r\n        </button>\r\n      ) : (\r\n        <button key={`unitButton${index}`} onClick={toggleTemperatureUnit}>\r\n          °{buttonText}\r\n        </button>\r\n      );\r\n    return button;\r\n  });\r\n\r\n  return <div className='unitSelect'>{temperatureSelectButtons}</div>;\r\n};\r\n\r\nexport default UnitSelect;\r\n","import Image from '../../../utilities/Image/Image';\r\nimport { forecastValues } from '../../../types/';\r\nimport { useTypedSelector } from '../../../hooks/use-typed-selector';\r\nimport { printDegree } from '../../../utilities/printDegree';\r\nimport './dayCard.css';\r\n\r\nconst DayCard: React.FC<forecastValues> = ({\r\n  day,\r\n  image,\r\n  temperatureMax,\r\n  temperatureMin,\r\n}) => {\r\n  const temperatureUnit = useTypedSelector((state) => state.settings.weatherUnit);\r\n  \r\n  const maxTemperature = printDegree(temperatureMax, temperatureUnit)\r\n  const minTemperature = printDegree(temperatureMin,temperatureUnit)\r\n  const weatherIcon = `/assets/${image}`;\r\n  return (\r\n    <div className='dayCard'>\r\n      <div className='dateText'>\r\n        <span>{day}</span>\r\n      </div>\r\n      <Image src={weatherIcon} height='62' />\r\n      <div className='temperatureMinMax'>\r\n        <span className='temperatureMax'>{maxTemperature.val}{maxTemperature.unit}</span>\r\n        <span className='temperatureMin'>{minTemperature.val}{minTemperature.unit}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayCard;\r\n","import DayCard from './dayCard/dayCard';\r\nimport { forecastValues } from '../../types/';\r\n\r\nimport './forecasts.css';\r\n\r\ninterface forecastsList {\r\n  forecasts: forecastValues[];\r\n}\r\n\r\nconst ForeCasts: React.FC<forecastsList> = ({ forecasts }): JSX.Element => {\r\n  \r\n  const fiveDayforecasts = forecasts.map((forecast, index) => {\r\n\r\n    \r\n    return (\r\n      <DayCard\r\n        day={forecast.day}\r\n        image={forecast.image}\r\n        temperatureMax={forecast.temperatureMax}\r\n        temperatureMin={forecast.temperatureMin}\r\n        key={`day${index}`}\r\n      />\r\n      // <DayCard\r\n      //   day={forecast.day}\r\n      //   image={forecast.image}\r\n      //   temperatureMax={printDegree(forecast.temperatureMax,temperatureUnit)}\r\n      //   temperatureMin={printDegree(forecast.temperatureMin,temperatureUnit)}\r\n      //   key={`day${index}`}\r\n      // />\r\n    );\r\n  });\r\n  return <div className='foreCasts'>{fiveDayforecasts}</div>;\r\n};\r\n\r\nexport default ForeCasts;\r\n","import './highlightCard.css';\r\n\r\ninterface hCard {\r\n  children?: React.ReactChild | React.ReactChild[];\r\n  cardName: string;\r\n  cardTitle: string;\r\n}\r\n\r\nconst highlightCard: React.FC<hCard> = ({ children, cardName, cardTitle }) => {\r\n  const cardClass=`hightlight-item hightlight-${cardName}-item`\r\n  return (\r\n    <div className={cardClass}>\r\n      <div className='hightlight-item-heading'>{cardTitle}</div>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default highlightCard;\r\n","import './compass.css';\r\n\r\ninterface compassAngle {\r\n  angle: number;\r\n}\r\n\r\nconst compass: React.FC<compassAngle> = ({ angle }) => {\r\n  return <span className='wd-compass'><em style={{transform: `rotate(${angle}deg)`}}></em></span>;\r\n};\r\n\r\nexport default compass;\r\n","import HighlightCard from '../../../hoc/highlightCard/highlightCard';\r\nimport Compass from '../../../utilities/compass/compass';\r\nimport './windCard.css';\r\n\r\ninterface windCardParams {\r\n  windSpeed: number;\r\n  windDirection: number;\r\n  windDirectionCompass: string;\r\n  speedUnit: string;\r\n}\r\n\r\nconst windCard: React.FC<windCardParams> = ({\r\n  windSpeed,\r\n  windDirection,\r\n  windDirectionCompass,\r\n  speedUnit,\r\n}): JSX.Element => {\r\n  const windSpeedString = windSpeed.toFixed(1)\r\n  return (\r\n    <HighlightCard cardTitle='Wind status' cardName='wind'>\r\n      <div className='windSpeed'>\r\n        <span className=\"windSpeedNumber\">{windSpeedString}</span>\r\n        <span className=\"windSpeedUnit\">{speedUnit}</span>\r\n      </div>\r\n      <div className='windDirection'>\r\n        <Compass angle={windDirection} />\r\n        <span className='wd-text'>{windDirectionCompass}</span>\r\n      </div>\r\n    </HighlightCard>\r\n  );\r\n};\r\n\r\nexport default windCard;\r\n","import './percentBar.css'\r\n\r\n\r\ninterface barParameters {\r\n  value: number;\r\n  colors: string[];\r\n}\r\n\r\nconst percentBar: React.FC<barParameters> = ({ value, colors }) => {\r\n  \r\n  return <div className=\"percentBar\">\r\n    <div className=\"barIndicators\"><span>0</span><span>50</span><span>100</span></div>\r\n    <div className=\"barItself\"><span className=\"valueBar\" style={{width: `calc( 100% * (${value} / 100))`}}></span></div>\r\n    <div className=\"percent-symbol\">%</div>\r\n    \r\n  </div>\r\n\r\n}\r\n\r\nexport default percentBar;\r\n","import HighlightCard from '../../../hoc/highlightCard/highlightCard';\r\nimport PercentBar from '../../../utilities/percentBar/percentBar';\r\nimport './humidityCard.css';\r\n\r\ninterface humidityCardParams {\r\n  humidityPercent: number;\r\n}\r\n\r\nconst humidityCard: React.FC<humidityCardParams> = ({\r\n  humidityPercent\r\n}):JSX.Element => {\r\n  return (\r\n    <HighlightCard cardTitle='Humidity' cardName='humidity'>\r\n      <div className='humidityPercent'>\r\n        <span className=\"humidityPercentNumber\">{humidityPercent}</span>\r\n        <span className=\"humidityPercentSymbol\">%</span>\r\n      </div>\r\n      <div className='humidityBar'>\r\n        <PercentBar value={humidityPercent} colors={['#E7E7EB','#FFEC65']} />\r\n\r\n        \r\n      </div>\r\n    </HighlightCard>\r\n  );\r\n};\r\n\r\nexport default humidityCard;\r\n","import HighlightCard from '../../../hoc/highlightCard/highlightCard';\r\nimport './visibilityCard.css';\r\n\r\ninterface visibilityCardParams {\r\n  visibilityDistance: number;\r\n  distanceUnit: string;\r\n}\r\n\r\nconst visibilityCard: React.FC<visibilityCardParams> = ({\r\n  visibilityDistance,\r\n  distanceUnit,\r\n}): JSX.Element => {\r\n  const visibilityDistanceString = visibilityDistance.toFixed(1)\r\n  return (\r\n    <HighlightCard cardTitle='Visibility' cardName='visibility'>\r\n      <div className='visibilityDistance'>\r\n        <span className='visibilityDistanceNumber'>{visibilityDistanceString}</span>\r\n        <span className='visibilityDistanceUnit'>{distanceUnit}</span>\r\n      </div>\r\n    </HighlightCard>\r\n  );\r\n};\r\n\r\nexport default visibilityCard;\r\n","import HighlightCard from '../../../hoc/highlightCard/highlightCard';\r\nimport './pressureCard.css';\r\n\r\ninterface pressureCardParams {\r\n  pressureAmountNumber: number;\r\n  pressureUnit: string;\r\n}\r\n\r\nconst pressureCard: React.FC<pressureCardParams> = ({\r\n  pressureAmountNumber,\r\n  pressureUnit\r\n}):JSX.Element => {\r\n  return (\r\n    <HighlightCard cardTitle='Air Pressure' cardName='pressure'>\r\n      <div className='pressureAmount'>\r\n        <span className='pressureAmountNumber'>{pressureAmountNumber}</span>\r\n        <span className='pressureUnit'>{pressureUnit}</span>\r\n      </div>\r\n    </HighlightCard>\r\n  );\r\n};\r\n\r\nexport default pressureCard;\r\n","import './highlights.css';\r\nimport WindCard from './windCard/windCard';\r\nimport HumidityCard from './humidityCard/humidityCard';\r\nimport VisibilityCard from './visibilityCard/visibilityCard';\r\nimport PressureCard from './pressureCard/pressureCard';\r\n\r\ninterface Highlights {\r\n  windSpeed: number;\r\n  windDirection: number;\r\n  windDirectionCompass: string;\r\n  humidity: number;\r\n  visibility: number;\r\n  airPressure: number;\r\n}\r\n\r\nconst highlights: React.FC<Highlights> = (props): JSX.Element => {\r\n  //console.log(\"PROPS\",props)\r\n  return (\r\n    <div className='highlights'>\r\n      <h1>Today’s Hightlights </h1>\r\n      <div className='highlights-items'>\r\n        <WindCard\r\n          windSpeed={props.windSpeed}\r\n          windDirectionCompass={props.windDirectionCompass}\r\n          windDirection={props.windDirection}\r\n          speedUnit='mph'\r\n        />\r\n        <HumidityCard humidityPercent={props.humidity} />\r\n        <VisibilityCard visibilityDistance={props.visibility} distanceUnit='miles' />\r\n        <PressureCard pressureAmountNumber={Math.floor(props.airPressure)} pressureUnit='mb' />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default highlights;\r\n","import UnitSelect from '../unitSelect/unitSelect';\r\nimport ForeCasts from '../forecasts/forecasts';\r\nimport Highlights from '../highlights/highlights';\r\nimport { Weather } from '../../types/';\r\nimport { formatDate } from '../../utilities/formatDate';\r\n\r\n\r\ninterface ForeCastAndHighlights {\r\n  forecastsParams: {\r\n    nextFiveDays: Weather[];\r\n    windSpeed: number;\r\n    windDirection: number;\r\n    windDirectionCompass: string;\r\n    humidity: number;\r\n    visibility: number;\r\n    airPressure: number;\r\n  };\r\n}\r\n\r\nconst forecatsHighlights: React.FC<ForeCastAndHighlights> = ({\r\n  forecastsParams,\r\n}: ForeCastAndHighlights): JSX.Element => {\r\n  // const dummyForecasts =\r\n  const nextFiveDaysValues = forecastsParams.nextFiveDays.map(\r\n    (forecast, index) => {\r\n      const dayName =\r\n        index === 0\r\n          ? 'Tomorrow'\r\n          : formatDate(new Date(forecast.applicable_date));\r\n      return {\r\n        day: dayName,\r\n        image: `${forecast.weather_state_abbr}.png`,\r\n        temperatureMax: forecast.max_temp,\r\n        temperatureMin: forecast.min_temp,\r\n      };\r\n    }\r\n  );\r\n\r\n  const { nextFiveDays, ...highlightsValues } = forecastsParams;\r\n  //console.log(\"HIGHLIGHTS\",highlightsValues)\r\n\r\n  return (\r\n    <>\r\n      <UnitSelect />\r\n      <ForeCasts forecasts={nextFiveDaysValues} />\r\n      {/* <Highlights highlights={highlightsValues} /> */}\r\n      <Highlights {...highlightsValues}  />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default forecatsHighlights;\r\n","import Current from './components/current/current';\nimport ForecatsHighlights from './components/forecasts-highlights/forecasts-highlights';\nimport { useActions } from './hooks/use-actions';\nimport { useEffect, useState } from 'react';\nimport { skipCors } from './utilities/skipCors/skipCors';\nimport { useTypedSelector } from './hooks/use-typed-selector';\n\n// import axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [location, setLocation] = useState('');\n  const { fetchWeather, getCityWoeid } = useActions();\n  const locationWoeid = useTypedSelector((state) => state.location.woeid);\n  const weatherParams = useTypedSelector(\n    ({\n      weather: {\n        temperature,\n        situation,\n        nextFiveDays,\n        windSpeed,\n        windDirection,\n        windDirectionCompass,\n        humidity,\n        visibility,\n        airPressure,\n        abbr,\n        loading,\n      },\n    }) => {\n      const params = {\n        currentParams: {\n          temperature,\n          situation,\n          abbr,\n        },\n        forecastsParams: {\n          nextFiveDays,\n          windSpeed,\n          windDirection,\n          windDirectionCompass,\n          humidity,\n          visibility,\n          airPressure,\n        },\n        loadingParam: { loading },\n      };\n      return params;\n    }\n  );\n\n  const getCurrentLocation = () => {\n    //console.log(\"LOCATION CALL\")\n    skipCors('http://ip-api.com/json/', 'http://weather-cors.trmov.com/', '').then(\n      (data) => {\n        //console.log(\"DATA >>\",)\n        if (data.status === 'success') {\n          if (data.city === 'Frankfurt am Main') {\n            localStorage.setItem('location', 'Frankfurt');\n            setLocation(data.city);\n          } else {\n            localStorage.setItem('location', data.city);\n            setLocation(data.city);\n          }\n          \n          \n        } else {\n          console.log('ERROR', 'Location could not be fetched');\n        }\n      }\n    );\n  };\n\n  const getLocation = () => {\n    const myLocation = localStorage.getItem('location');\n    if (myLocation === null) {\n      getCurrentLocation();\n    } else {\n      setLocation(myLocation);\n    }\n  };\n\n  useEffect(() => {\n    getLocation();\n  }, []);\n\n  useEffect(() => {\n    if (locationWoeid !== 0) fetchWeather(locationWoeid);\n  }, [locationWoeid]);\n\n  useEffect(() => {\n    console.log(location);\n    if (location !== '') getCityWoeid(location);\n  }, [location]);\n\n  const paramsLoading = weatherParams.loadingParam.loading;\n  return (\n    <div className='App'>\n      <main>\n        <section className='current'>\n          {paramsLoading ? (\n            <div className='loading-placeholder'>\n              <span>Loading...</span>\n            </div>\n          ) : null}\n\n          <Current currentParams={weatherParams.currentParams}\n            \n          />\n        </section>\n        <section className='forecasts-highlights'>\n          {paramsLoading ? (\n            <div className='loading-placeholder'>\n              <span>Loading...</span>\n            </div>\n          ) : null}\n          <ForecatsHighlights forecastsParams={weatherParams.forecastsParams} />\n        </section>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { store } from './state/';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}